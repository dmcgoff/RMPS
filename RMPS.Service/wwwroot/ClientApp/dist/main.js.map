{"version":3,"sources":["webpack:///./ClientApp/src/$_lazy_route_resource lazy namespace object","webpack:///./ClientApp/src/app/app.component.css","webpack:///./ClientApp/src/app/app.component.html","webpack:///./ClientApp/src/app/app.component.ts","webpack:///./ClientApp/src/app/app.module.ts","webpack:///./ClientApp/src/app/components/courses/courses.component.css","webpack:///./ClientApp/src/app/components/courses/courses.component.html","webpack:///./ClientApp/src/app/components/courses/courses.component.ts","webpack:///./ClientApp/src/app/services/course.service.ts","webpack:///./ClientApp/src/environments/environment.ts","webpack:///./ClientApp/src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,sF;;;;;;;;;;;ACZA,mB;;;;;;;;;;;ACAA,qGAAqG,OAAO,8oBAA8oB,2K;;;;;;;;;;;;;;;;;;;;;;;;;ACAhsB;AACR;AAClD,8DAA8D;AAC9D,qDAAqD;AAOrD;IAII,sBAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QAHhD,UAAK,GAAG,eAAe,CAAC;QACxB,eAAU,GAAG,IAAI,CAAC;IAEkC,CAAC;IAErD,+BAAQ,GAAR;QACI,gCAAgC;QAChC,4DAA4D;IAChE,CAAC;IATQ,YAAY;QALxB,+DAAS,CAAC;YACP,QAAQ,EAAE,UAAU;;;SAGvB,CAAC;yCAKqC,sEAAa;OAJvC,YAAY,CAUxB;IAAD,mBAAC;CAAA;AAVwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVzB,kBAAkB;AAC6D;AACvB;AACE;AACjB;AACc;AAEvD,mBAAmB;AACD;AAClB,gEAAgE;AACI;AACE;AACC;AACM;AAE7E,aAAa;AACkC;AAC/C,oHAAoH;AAC1C;AAE1E,WAAW;AACX,8DAA8D;AAC9D,0DAA0D;AACA;AAE1D,IAAM,SAAS,GAAW;IACtB,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,wBAAwB,EAAE,SAAS,EAAE,MAAM,EAAE;IACrE,EAAE,IAAI,EAAE,uBAAuB,EAAE,SAAS,EAAE,uFAAgB,EAAE;IAC9D,EAAE,IAAI,EAAE,gBAAgB,EAAE,SAAS,EAAE,uFAAgB,EAAE;CAC1D,CAAC;AA6BF;IAAA;IAAyB,CAAC;IAAb,SAAS;QA3BrB,8DAAQ,CAAC;YACN,YAAY,EAAE;gBACV,4DAAY;gBACZ,+BAA+B;gBAC/B,uFAAgB;aACnB;YACD,OAAO,EAAE;gBACL,uEAAa;gBACb,4FAAuB;gBACvB,qEAAgB;gBAChB,4DAAY,CAAC,OAAO,CAAC,SAAS,CAAC;gBAC/B,eAAe;gBACf,iFAAe;gBACf,mFAAgB;gBAChB,uEAAU;gBACV,2EAAY;gBACZ,wEAAW;gBACX,4EAAa;aAChB;YACD,SAAS,EAAE;gBACP,iBAAiB;gBACjB,uEAAa;gBACb,iBAAiB;gBACjB,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,2BAA2B,EAAE;aAChE;YACD,SAAS,EAAE,CAAC,4DAAY,CAAC;SAC5B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;AAStB,4DAA4D;AAC5D,2CAA2C;AAE3C,iDAAiD;AACjD,4DAA4D;AAC5D,iFAAiF;AAIjF,aAAa;AACb,mBAAmB;AACnB,kBAAkB;AAClB,MAAM;AACN,cAAc;AACd,oBAAoB;AACpB,iBAAiB;AACjB,6BAA6B;AAC7B,MAAM;AACN,kBAAkB;AAClB,6BAA6B;AAC7B,IAAI;AACJ,4BAA4B;;;;;;;;;;;;ACxF5B,mB;;;;;;;;;;;ACAA,myCAAmyC,aAAa,iIAAiI,aAAa,uIAAuI,aAAa,09B;;;;;;;;;;;;;;;;;;;;;;;;;;ACCxiD;AAC1C,gEAAgE;AAChE,oDAAoD;AACpD,uHAAuH;AACvH,wGAAwG;AAEtD;AACY;AAe9D;IAQI,0BAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QANzC,UAAK,GAA2B;YACnC,IAAI,EAAE,CAAC;YACP,IAAI,EAAE,EAAE;SACX,CAAC;QACF,cAAS,GAAG,KAAK,CAAC;IAEkC,CAAC;IAErD,mCAAQ,GAAR;QACI,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAED,uCAAY,GAAZ;QAAA,iBAKC;QAJG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;aAC/B,IAAI,CAAC,+DAAQ,CAAC,cAAM,YAAI,CAAC,SAAS,GAAG,KAAK,EAAtB,CAAsB,CAAC,CAAC;aAC5C,SAAS,CAAC,WAAC,IAAI,YAAI,CAAC,QAAQ,GAAG,CAAC,EAAjB,CAAiB,CAAC,CAAC;IAC3C,CAAC;IACM,0CAAe,GAAtB,UAAuB,KAA2B;QAC9C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAvBQ,gBAAgB;QAL5B,+DAAS,CAAC;YACP,QAAQ,EAAE,cAAc;;;SAG3B,CAAC;yCASqC,sEAAa;OARvC,gBAAgB,CAwB5B;IAAD,uBAAC;CAAA;AAxB4B;AA6B7B,mDAAmD;AAEnD,sDAAsD;AACtD,kCAAkC;AAElC,wBAAwB;AAExB,sBAAsB;AACtB,mBAAmB;AACnB,kBAAkB;AAClB,mBAAmB;AACnB,oBAAoB;AACpB,QAAQ;AAER,2DAA2D;AAE3D,kBAAkB;AAClB,8BAA8B;AAC9B,OAAO;AAEP,sBAAsB;AACtB,gCAAgC;AAChC,8CAA8C;AAC9C,qDAAqD;AACrD,kCAAkC;AAClC,0DAA0D;AAC1D,iBAAiB;AACjB,OAAO;AAEP,wDAAwD;AACxD,gDAAgD;AAChD,iDAAiD;AAEjD,2DAA2D;AAC3D,yCAAyC;AACzC,uDAAuD;AACvD,kDAAkD;AAClD,mBAAmB;AACnB,OAAO;AAEP,2CAA2C;AAC3C,6BAA6B;AAC7B,8BAA8B;AAC9B,OAAO;AAEP,mDAAmD;AACnD,oCAAoC;AACpC,iCAAiC;AACjC,UAAU;AAEV,mDAAmD;AACnD,0CAA0C;AAC1C,iCAAiC;AACjC,UAAU;AAEV,sDAAsD;AACtD,sCAAsC;AACtC,iCAAiC;AACjC,UAAU;AAEV,sCAAsC;AACtC,wCAAwC;AACxC,iCAAiC;AACjC,UAAU;AAEV,kCAAkC;AAClC,iDAAiD;AACjD,SAAS;AAET,mCAAmC;AACnC,kDAAkD;AAClD,SAAS;AACT,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3HH,uCAAuC;AACvC,oDAAoD;AACpD,qDAAqD;AAGF;AACD;AAOV;AAGT;AAC/B,uCAAuC;AAGvC;IAGI,uBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF5B,aAAQ,GAAW,mBAAmB,CAAC;IAEP,CAAC;IAElC,6BAAK,GAAZ,UAAa,KAA6B;QACtC,IAAM,QAAQ,GAAG,KAAG,4FAAyB,CAAC,KAAK,CAAG,CAAC,CAAC,sBAAsB;QAC9E,IAAM,SAAS,GAAG,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;QAEpD,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,GAAG,CAAI,IAAI,CAAC,QAAQ,SAAI,QAAU,CAAC,CAAC,+BAA+B;aACnE,GAAG,CAAC,UAAC,EAAsD;gBAApD,cAAI,EAAE,gBAAK,CAAC,sBAAsB;YACtC,QAAiB;gBACb,2DAA2D;gBAC3D,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,kGAA+B,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI;gBAC9D,KAAK,EAAE,KAAK;aAGd;QANF,CAME,CACL,CAAC;IACV,CAAC;IApBQ,aAAa;QADzB,gEAAU,EAAE;yCAIiB,+DAAU;OAH3B,aAAa,CAqBzB;IAAD,oBAAC;CAAA;AArByB;AA2B1B,8BAA8B;AAE9B,mFAAmF;AAEnF,yBAAyB;AACzB,sCAAsC;AACtC,4EAA4E;AAC5E,2BAA2B;AAC3B,qCAAqC;AACrC,0DAA0D;AAE1D,wCAAwC;AACxC,kEAAkE;AAClE,qBAAqB;AAErB,8BAA8B;AAC9B,kBAAkB;AAClB,OAAO;AAEP,4BAA4B;AAC5B,6DAA6D;AAC7D,yEAAyE;AACzE,OAAO;AACP,GAAG;;;;;;;;;;;;;;ACvEH;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./ClientApp/src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"main-wrapper\\\">\\r\\n    <aside class=\\\"nav-section\\\">\\r\\n        <h1>{{title}}</h1>\\r\\n        <h3 style=\\\"color: red\\\" *ngIf=\\\"!isWebApiUp\\\">The Web API is not running.</h3>\\r\\n        <ul>\\r\\n            <li>\\r\\n                <a routerLink=\\\"/regional-sales-status\\\" routerLinkActive=\\\"active-link\\\">Regional Sales Status</a>\\r\\n            </li>\\r\\n            <li>\\r\\n                <a routerLink=\\\"/course-catalog\\\" routerLinkActive=\\\"active-link\\\">Course Catalog</a>\\r\\n            </li>\\r\\n            <!-- <li>\\r\\n                <a routerLink=\\\"/team-efficiency\\\"><span class=\\\"icon icon-faves\\\"></span>Team Efficiency</a>\\r\\n            </li> -->\\r\\n        </ul>\\r\\n        <div class=\\\"rights\\\">\\r\\n            &copy; New Venture Software\\r\\n        </div>\\r\\n    </aside>\\r\\n    <section class=\\\"main-section\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n    </section>\\r\\n</div>\\r\\n\"","import { CourseService } from './services/course.service';\nimport { Component, OnInit } from '@angular/core';\n//import Courseservice = require(\"./services/course.service\");\n//import CourseService = Courseservice.CourseService;\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n    title = '{ Dashboard }';\n    isWebApiUp = true;\n\n    constructor(private courseService: CourseService) { }\n\n    ngOnInit() {\n        //this.courseService.getOrders()\n        //    .subscribe(() => { }, err => this.isWebApiUp = false);\n    }\n}\n","// Angular Modules\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n// Kendo UI Modules\r\nimport 'hammerjs';\r\n//import { ChartsModule } from '@progress/kendo-angular-charts';\r\nimport { DropDownsModule } from '@progress/kendo-angular-dropdowns';\r\nimport { DateInputsModule } from '@progress/kendo-angular-dateinputs';\r\nimport { GridModule, ExcelModule } from '@progress/kendo-angular-grid';\r\nimport { DialogModule, DialogsModule } from '@progress/kendo-angular-dialog';\r\n\r\n// Components\r\nimport { AppComponent } from './app.component';\r\n//import { RegionalSalesStatusComponent } from './components/regional-sales-status/regional-sales-status.component';\r\nimport { CoursesComponent } from './components/courses/courses.component';\r\n\r\n// Services\r\n//import { CountryService } from './services/country.service';\r\n//import { OrderService } from './services/order.service';\r\nimport { CourseService } from './services/course.service';\r\n\r\nconst appRoutes: Routes = [\r\n    { path: '', redirectTo: '/regional-sales-status', pathMatch: 'full' },\r\n    { path: 'regional-sales-status', component: CoursesComponent },\r\n    { path: 'course-catalog', component: CoursesComponent }\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        //RegionalSalesStatusComponent,\r\n        CoursesComponent\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        BrowserAnimationsModule,\r\n        HttpClientModule,\r\n        RouterModule.forRoot(appRoutes),\r\n        //ChartsModule,\r\n        DropDownsModule,\r\n        DateInputsModule,\r\n        GridModule,\r\n        DialogModule,\r\n        ExcelModule,\r\n        DialogsModule\r\n    ],\r\n    providers: [\r\n        //CountryService,\r\n        CourseService,\r\n        //ProductService,\r\n        { provide: 'baseUrl', useValue: 'http://localhost:9000/api' }\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\n\n\n\n\n\n\n\n//import { BrowserModule } from '@angular/platform-browser';\n//import { NgModule } from '@angular/core';\n\n//import { AppComponent } from './app.component';\n//import { GridModule } from '@progress/kendo-angular-grid';\n//import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\n\n//@NgModule({\n//  declarations: [\n//    AppComponent\n//  ],\n//  imports: [\n//    BrowserModule,\n//    GridModule,\n//    BrowserAnimationsModule\n//  ],\n//  providers: [],\n//  bootstrap: [AppComponent]\n//})\n//export class AppModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n    <h3>Products and Orders</h3>\\r\\n    <div style=\\\"position: relative\\\">\\r\\n        \\r\\n        <kendo-grid\\r\\n            [data]=\\\"products\\\" [height]=\\\"500\\\"\\r\\n            [sortable]=\\\"true\\\" [sort]=\\\"state.sort\\\"\\r\\n            [pageable]=\\\"true\\\" [skip]=\\\"state.skip\\\" [pageSize]=\\\"state.take\\\"\\r\\n            [groupable]=\\\"true\\\" [group]=\\\"state.group\\\"\\r\\n            [filterable]=\\\"true\\\" [filter]=\\\"state.filter\\\"\\r\\n            [scrollable]=\\\"'scrollable'\\\"\\r\\n            (dataStateChange)=\\\"dataStateChange($event)\\\">\\r\\n            \\r\\n            <ng-template kendoGridToolbarTemplate>\\r\\n                <button type=\\\"button\\\" kendoGridExcelCommand><span class=\\\"k-icon k-i-file-excel\\\"></span>Export to Excel</button>\\r\\n            </ng-template>\\r\\n\\r\\n            <kendo-grid-column field=\\\"courseId\\\" title=\\\"Course Id\\\" width=\\\"50px\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"courseName\\\" title=\\\"Name\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"specialty\\\" title=\\\"Specialty\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"description\\\" title=\\\"Description\\\" width=\\\"150px\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"reviewDate\\\" title=\\\"Review Date\\\" format=\\\"{0:MM/dd/yyyy}\\\" filter=\\\"date\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"releaseDate\\\" title=\\\"Release Date\\\" format=\\\"{0:MM/dd/yyyy}\\\" filter=\\\"date\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"expirationDate\\\" title=\\\"Expiration Date\\\" format=\\\"{0:MM/dd/yyyy}\\\" filter=\\\"date\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"credits\\\" title=\\\"Credits\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"cMECert\\\" title=\\\"CME Cert\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"cNECert\\\" title=\\\"CNE Cert\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"riskSpecific\\\" title=\\\"Risk Specific\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"settings\\\" title=\\\"Settings\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"medicalRole\\\" title=\\\"Medical Role\\\"></kendo-grid-column>\\r\\n            <kendo-grid-column field=\\\"state\\\" title=\\\"State\\\"></kendo-grid-column>\\r\\n\\r\\n            <kendo-grid-excel fileName=\\\"CourseCatalog.xlsx\\\"></kendo-grid-excel>\\r\\n        </kendo-grid>\\r\\n        <div *ngIf=\\\"isLoading\\\" class=\\\"spinner-wrapper\\\">\\r\\n            <span class=\\\"k-icon k-i-loading spinner\\\"></span>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","\r\nimport { finalize } from 'rxjs/operators';\r\n//import { CourseService } from '../../services/course.service';\r\n//import { Component, OnInit } from '@angular/core';\r\n//import { SelectionEvent, GridDataResult, PageChangeEvent, DataStateChangeEvent } from '@progress/kendo-angular-grid';\r\n//import { SortDescriptor, orderBy, State, GroupDescriptor, process } from '@progress/kendo-data-query';\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CourseService } from '../../services/course.service';\r\nimport { Observable } from 'rxjs';\r\nimport { GridDataResult, DataStateChangeEvent } from '@progress/kendo-angular-grid';\r\nimport { DataSourceRequestState, DataResult } from '@progress/kendo-data-query';\r\n\r\n\r\n\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'rmps-courses',\r\n    templateUrl: './courses.component.html',\r\n    styleUrls: ['./courses.component.css']\r\n})\r\nexport class CoursesComponent implements OnInit {\r\n    public products: GridDataResult;\r\n    public state: DataSourceRequestState = {\r\n        skip: 0,\r\n        take: 20\r\n    };\r\n    isLoading = false;\r\n\r\n    constructor(private courseService: CourseService) { }\r\n\r\n    ngOnInit() {\r\n        this.loadGridData();\r\n    }\r\n\r\n    loadGridData() {\r\n        this.isLoading = true;\r\n        this.courseService.fetch(this.state)\r\n            .pipe(finalize(() => this.isLoading = false))\r\n            .subscribe(r => this.products = r);\r\n    }\r\n    public dataStateChange(state: DataStateChangeEvent): void {\r\n        this.state = state;\r\n        this.loadGridData();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//export class CoursesComponent implements OnInit {\r\n\r\n//    orders: GridDataResult = { data: [], total: 0 };\r\n//    selectedOrderInfo: any = {};\r\n\r\n//    isLoading = false;\r\n\r\n//    state: State = {\r\n//        sort: [],\r\n//        skip: 0,\r\n//        take: 10,\r\n//        group: [],\r\n//    };\r\n\r\n//    constructor(private courseService: CourseService) { }\r\n\r\n//    ngOnInit() {\r\n//        this.loadGridData();\r\n//    }\r\n\r\n//    loadGridData() {\r\n//        this.isLoading = true;\r\n//        this.courseService.getOrders().pipe(\r\n//            finalize(() => this.isLoading = false))\r\n//            .subscribe(data => {\r\n//                this.orders = process(data, this.state);\r\n//            });\r\n//    }\r\n\r\n//    onGridSelectionChange(selection: SelectionEvent) {\r\n//        const row = selection.selectedRows[0];\r\n//        //const orderId = row.dataItem.OrderID;\r\n\r\n//        //this.courseService.getOrderInformation(orderId)\r\n//        //    .subscribe(orderInfo => {\r\n//        //        this.selectedOrderInfo = orderInfo;\r\n//        //        this.openOrderDetailsDialog();\r\n//        //    });\r\n//    }\r\n\r\n//    onGridDataStateChange(state: State) {\r\n//        this.state = state;\r\n//        this.loadGridData();\r\n//    }\r\n\r\n//    // onGridSortChange(sort: SortDescriptor[]) {\r\n//    //     this.state.sort = sort;\r\n//    //     this.loadGridData();\r\n//    // }\r\n\r\n//    // onGridPageChange(event: PageChangeEvent) {\r\n//    //     this.state.skip = event.skip;\r\n//    //     this.loadGridData();\r\n//    // }\r\n\r\n//    // onGridGroupChange(group: GroupDescriptor[]) {\r\n//    //     this.state.group = group;\r\n//    //     this.loadGridData();\r\n//    // }\r\n\r\n//    // onGridFilterChange(filter) {2\r\n//    //     this.state.filter = filter;\r\n//    //     this.loadGridData();\r\n//    // }\r\n\r\n//    //openOrderDetailsDialog() {\r\n//    //    this.orderDetailsDialogOpened = true;\r\n//    //}\r\n\r\n//    //closeOrderDetailsDialog() {\r\n//    //    this.orderDetailsDialogOpened = false;\r\n//    //}\r\n//}\r\n","﻿import { map } from 'rxjs/operators';\r\n//import { Observable } from 'rxjs/Rx';\r\n//import { HttpClient } from '@angular/common/http';\r\n//import { Inject, Injectable } from '@angular/core';\r\n\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n    toDataSourceRequestString,\r\n    translateDataSourceResultGroups,\r\n    translateAggregateResults,\r\n    DataResult,\r\n    DataSourceRequestState\r\n    } from '@progress/kendo-data-query';\r\nimport { GridDataResult, DataStateChangeEvent } from '@progress/kendo-angular-grid';\r\nimport { Observable } from 'rxjs';\r\nimport 'rxjs/add/operator/map';\r\n//import { map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class CourseService {\r\n    private BASE_URL: string = 'api/CourseCatalog';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    public fetch(state: DataSourceRequestState): Observable<DataResult> {\r\n        const queryStr = `${toDataSourceRequestString(state)}`; // Serialize the state\r\n        const hasGroups = state.group && state.group.length;\r\n\r\n        return this.http\r\n            .get(`${this.BASE_URL}?${queryStr}`) // Send the state to the server\r\n            .map(({ data, total /*, aggregateResults*/ }: GridDataResult) => // Process the response\r\n                (<GridDataResult>{\r\n                    // If there are groups, convert them to a compatible format\r\n                    data: hasGroups ? translateDataSourceResultGroups(data) : data,\r\n                    total: total,\r\n                    // Convert the aggregates if such exist\r\n                    //aggregateResult: translateAggregateResults(aggregateResults)\r\n                })\r\n            );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//export class CourseService {\r\n\r\n//    constructor(private http: HttpClient, @Inject('baseUrl') private baseUrl) { }\r\n\r\n//    // GET /api/orders/\r\n//    getOrders(): Observable<any[]> {\r\n//        return this.http.get<any[]>(`${this.baseUrl}/coursecatalog`).pipe(\r\n//            map(data => {\r\n//                data.forEach(x => {\r\n//                    x.OrderDate = new Date(x.OrderDate);\r\n\r\n//                    if (x.ShippedDate)\r\n//                        x.ShippedDate = new Date(x.ShippedDate);\r\n//                });\r\n\r\n//                return data;\r\n//            }));\r\n//    }\r\n\r\n//    // GET /api/orders/:id\r\n//    getOrderInformation(orderId: number): Observable<any> {\r\n//        return this.http.get<any>(`${this.baseUrl}/orders/${orderId}`);\r\n//    }\r\n//}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}